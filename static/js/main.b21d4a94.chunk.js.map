{"version":3,"sources":["WeatherContext.js","CurrentWeather.js","Day.js","Days.js","SearchWeather.js","App.js","serviceWorker.js","index.js"],"names":["WeatherContext","createContext","WeatherProvider","props","useState","city","setCity","cityData","setCityData","weatherData","setWeatherData","isLoading","setIsLoading","useEffect","fetch","mode","then","response","json","catch","error","console","log","Provider","value","weather","cityInfo","citySetter","loading","children","CurrentWeather","id","useContext","convertToTime","timeCode","date","Date","hour","getHours","minutes","getMinutes","className","name","country","month","getMonth","dateNumber","getDate","day","getDay","convertTimeToString","list","dt","src","icon","Math","round","main","temp","oldString","stringArray","split","toUpperCase","join","capitalize","description","temp_max","temp_min","wind","speed","humidity","sunrise","sunset","Day","timestamp","timezone","getMonthandDay","index","hours","getTime","Days","map","timeSlot","i","key","SearchWeather","searchTerm","setSearchTerm","onSubmit","e","preventDefault","type","autoComplete","placeholder","onChange","target","App","document","body","style","backgroundImage","window","innerWidth","innerHeight","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b21d4a94.chunk.js","sourcesContent":["import React, { useState, createContext, useEffect } from 'react';\n\nexport const WeatherContext = createContext();\n\nexport const WeatherProvider = (props) => {\n\n    const [city, setCity] = useState('Amsterdam')\n    const [cityData, setCityData] =useState('');\n    const [weatherData, setWeatherData] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect( () => {\n        fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&appid=7e28b5e7ee2cd04718568031c6fcfff3`, {mode: 'cors'})\n        .then((response) => {\n            return response.json();\n        })\n        .then((response) => {\n            setCityData(response.city);\n            setWeatherData(response);\n            setIsLoading(false);\n        })\n        .catch((error) => {\n            console.log('Error!')\n            setCity('Amsterdam');\n            //look up how to handle errors\n            //app currently crashes when nonsense is submitted\n        });\n    }, [city]);\n\n    return (\n        <WeatherContext.Provider value={{weather: [weatherData, setWeatherData], cityInfo: [cityData, setCityData], citySetter: [city, setCity], loading: [isLoading, setIsLoading]}}>\n            { props.children }\n        </WeatherContext.Provider>\n    );\n}","import React, {useContext} from 'react';\nimport './App.css'\nimport {WeatherContext} from './WeatherContext';\n\nconst CurrentWeather = () => {\n\n    const {weather, cityInfo, citySetter, loading} = useContext(WeatherContext);\n    const [weatherData, setWeatherData] = weather;\n    const [cityData, setCityData] = cityInfo;\n    const [city, setCity] = citySetter;\n    const [isLoading, setIsLoading] = loading;\n\n    function getIcon (id) {\n        let url = `http://openweathermap.org/img/wn/${id}@4x.png`\n        return url;\n    }\n\n    function convertTimeToString (timeCode) {\n        let days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n        let timestamp = timeCode;\n        let date = new Date(timestamp * 1000);\n        let month = date.getMonth(); //number between 0 and 11\n        let dateNumber = date.getDate(); //number dayof the month between 1 and 31\n        let day = date.getDay(); //day as a number between 0 and 6\n        return `${days[day]} ${dateNumber} ${months[month]}`\n    }\n\n    function convertToTime (timeCode) {\n        let timestamp = timeCode;\n        let date = new Date(timestamp * 1000);\n        let hour = date.getHours();\n        let minutes = date.getMinutes();\n        if (minutes < 10) {\n            minutes = '0' + minutes;\n        }\n        return `${hour}:${minutes}`\n    }\n\n    function capitalize (oldString) {\n        let stringArray = oldString.split(\"\");\n        stringArray[0] = stringArray[0].toUpperCase();\n        let newString = stringArray.join(\"\");\n        return newString\n\n    }\n\n    return (\n        <div className=\"current-weather\">\n            <div className=\"current-weather-top\">\n                <div className=\"city-name\">\n                    <h1> { `${cityData.name}, ${cityData.country}` } </h1>\n                </div>\n                <div className=\"date\">\n                    { isLoading ? 'Loading' : <p> { convertTimeToString(weatherData.list[0].dt) } </p>}\n                </div>\n            </div>\n            <div className=\"current-weather-bottom\">\n                <div className=\"current-weather-left\">\n                    <div className=\"current-lower-container\">\n                        <div className=\"current-icon\">\n                            {isLoading ? '-' : <img src={ getIcon(weatherData.list[0].weather[0].icon)}/>}\n                        </div>\n                        <div className=\"current-info\">\n                            <div className=\"current-temp\">\n                                {isLoading ? '-' :  `${ Math.round(weatherData.list[0].main.temp) }°` }\n                            </div>\n                            <div className=\"current-description\">\n                                { isLoading? '-' : <p> {capitalize(weatherData.list[0].weather[0].description)}  </p> }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"current-weather-right\">\n                    <div className=\"high-temp\">\n                        { isLoading ? '-' : <p> { `${ Math.round(weatherData.list[0].main.temp_max) }°` } </p> }\n                        <p className=\"label\">High</p>\n                    </div>\n                    <div className=\"low-temp\">\n                        { isLoading ? '-' : <p> { `${ Math.round(weatherData.list[0].main.temp_min) }°` } </p> }\n                        <p className=\"label\">Low</p>\n                    </div>\n                    <div className=\"wind\">\n                        { isLoading ? '-' : <p> { `${ weatherData.list[0].wind.speed } m/s` } </p> }\n                        <p className=\"label\">Wind Speed</p>\n                    </div>\n                    <div className=\"humidity\">\n                        { isLoading ? '-' : <p> { weatherData.list[0].main.humidity }% </p> }\n                        <p className=\"label\">Humidity</p>\n                    </div>\n                    <div className=\"sunrise\">\n                        { isLoading ? '-' : <p> { `${ convertToTime(cityData.sunrise) }` } </p> }\n                        <p className=\"label\">Sunrise</p>\n                    </div>\n                    <div className=\"sunset\">\n                        { isLoading ? '-' : <p> { `${ convertToTime(cityData.sunset) }` } </p> }\n                        <p className=\"label\">Sunset</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CurrentWeather","import React, {useContext, useEffect} from 'react';\nimport './App.css'\nimport {WeatherContext} from './WeatherContext';\n\nfunction Day (props) {\n    const {weather, cityInfo, citySetter, loading} = useContext(WeatherContext);\n    const [weatherData, setWeatherData] = weather;\n    const [cityData, setCityData] = cityInfo;\n    const [city, setCity] = citySetter;\n    const [isLoading, setIsLoading] = loading;\n    \n    function getIcon (id) {\n        let url = `http://openweathermap.org/img/wn/${id}.png`\n        return url;\n    }\n\n    function getMonthandDay (timeCode) {\n        let timestamp = timeCode + cityData.timezone;\n        let date = new Date(timestamp * 1000);\n        let month = date.getMonth() + 1; //number between 0 and 11\n        let dateNumber = date.getDate(); //number dayof the month between 1 and 31\n        let hours = date.getHours(); //between 0 and 23\n        let minutes = date.getMinutes(); //between 0 and 59\n        return `${month}.${dateNumber}`\n    }\n\n    function getTime (timeCode) {\n        let timestamp = timeCode + cityData.timezone;\n        let date = new Date(timestamp * 1000);\n        let hours = date.getHours(); //between 0 and 23\n        let minutes = date.getMinutes() + '0'; //between 0 and 59\n        return `${hours}:${minutes}`\n    }\n\n    // console.log(cityData.timezone);\n\n    return (\n        <div className=\"day\">\n            {isLoading \n            ? (<p>-</p>) \n            : (\n                <div className=\"forecast\">\n                    <div className=\"forecast-date\">\n                        <p>{ getMonthandDay(weatherData.list[props.index].dt) }</p>\n                    </div>\n                    <div className=\"forecast-time\">\n                        <p>{ getTime(weatherData.list[props.index].dt) }</p>\n                    </div>\n                    <div className=\"forecast-icon\">\n                        {/* { weatherData.list[props.index].weather[0].icon } */}\n                        <img src={ getIcon(weatherData.list[props.index].weather[0].icon)}/>\n                    </div>\n                    <div className=\"forecast-temp\">\n                        <p>{ Math.round(weatherData.list[props.index].main.temp) }°</p>\n                    </div>\n            </div>\n            ) }\n        </div>\n    )\n}\n\nexport default Day;","import React, { useContext  } from 'react'\nimport './App.css'\nimport Day from './Day'\nimport {WeatherContext} from './WeatherContext';\n\nfunction Days () {\n\n    const {weather, cityInfo, citySetter, loading} = useContext(WeatherContext);\n    const [weatherData, setWeatherData] = weather;\n    const [cityData, setCityData] = cityInfo;\n    const [city, setCity] = citySetter;\n    const [isLoading, setIsLoading] = loading;\n\n    return (\n        <div className=\"days\">\n            <div className=\"forecast-title\">\n                <h2> Forecast </h2>\n            </div>\n            <div className=\"forecast-box\">\n            { isLoading ? 'Loading' : (weatherData.list.map( (timeSlot, i) => {\n                return <Day index= {i} key={i}/> \n            })) }\n            </div>\n        </div>\n    )\n}\n\nexport default Days","import React, {useState, useContext} from 'react';\nimport {WeatherContext} from './WeatherContext';\n\nconst SearchWeather = () => {\n    \n    const {weather, cityInfo, citySetter, loading} = useContext(WeatherContext);\n    const [cityData, setCityData] = cityInfo;\n    const [city, setCity] = citySetter;\n    const [isLoading, setIsLoading] = loading;\n    const [searchTerm, setSearchTerm] = useState('');\n\n    const updateSearchTerm = (e) => {\n        setSearchTerm(e.target.value)\n    };\n\n    const updateCity = (e) => {\n        e.preventDefault();\n        setCity(searchTerm);\n        setSearchTerm('');\n    }\n\n    return (\n        <form onSubmit={updateCity} className=\"searchBar\">\n            <input type=\"text\" name=\"city\" autoComplete=\"off\" placeholder=\"Enter a city...\" value= { searchTerm } onChange={ updateSearchTerm }/>\n            <button></button>\n        </form>\n    )\n}\n\nexport default SearchWeather;","import React from 'react';\nimport CurrentWeather from './CurrentWeather';\nimport Days from './Days';\nimport {WeatherProvider} from './WeatherContext';\nimport SearchWeather from './SearchWeather';\n\nfunction App () {\n\n  \n  document.body.style.backgroundImage = `https://source.unsplash.com/${window.innerWidth}x${window.innerHeight}/?nature`\n\n  // function getBackground () {\n  //   `https://source.unsplash.com/${window.innerWidth}x${window.innerHeight}/?nature`\n  // }\n\n  return(\n    <WeatherProvider>\n      <div className=\"app\">\n        <SearchWeather />\n        <CurrentWeather />\n        <Days />\n      </div>\n    </WeatherProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}